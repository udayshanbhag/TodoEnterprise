version: '3.1'

services:

  elasticsearch:
   image: docker.elastic.co/elasticsearch/elasticsearch:7.5.1
   container_name: elasticsearch
   ports:
    - "9200:9200"

   volumes:
    - elasticsearch-data:/usr/share/elasticsearch/data
   networks:
    - docker-network
   environment:
    - discovery.type=single-node

  
  kibana:
   image: docker.elastic.co/kibana/kibana:7.5.1
   container_name: kibana
   ports:
    - "5601:5601"
   depends_on:
    - elasticsearch
   networks:
    - docker-network

  todoapi:
   image: todoapi:1.0
   container_name: todoapi
   ports:
    - "5000:80"
    - "5002:5002"
   depends_on:
    - elasticsearch    
   networks:
    - docker-network

  prometheus:
   image: prom/prometheus
   container_name: prometheus
   ports:
    - "9090:9090"
   volumes:
    - ./prometheus:/etc/prometheus/
   networks:
    - docker-network
  
  grafana:
   image: grafana/grafana
   container_name: grafana
   volumes:
    - ./grafana:/etc/grafana/
   ports:
    - "3000:3000"
   networks:
    - docker-network
  
  postgres:
    image: postgres
    container_name: postgres
    volumes:
     - postgres_data:/var/lib/postgresql/data
    environment:
     POSTGRES_DB: keycloak
     POSTGRES_USER: keycloak
     POSTGRES_PASSWORD: password
    networks:
     - docker-network
  
  keycloak:
    image: quay.io/keycloak/keycloak:latest
    container_name: keycloak
    environment:
        DB_VENDOR: POSTGRES
        DB_ADDR: postgres
        DB_DATABASE: keycloak
        DB_USER: keycloak
        DB_SCHEMA: public
        DB_PASSWORD: password
        KEYCLOAK_USER: admin
        KEYCLOAK_PASSWORD: admin
        # Uncomment the line below if you want to specify JDBC parameters. The parameter below is just an example, and it shouldn't be used in production without knowledge. It is highly recommended that you read the PostgreSQL JDBC driver documentation in order to use it.
        #JDBC_PARAMS: "ssl=true"
    ports:
      - 8080:8080
    depends_on:
      - postgres
    networks:
     - docker-network
  
  webserver:
    image: nginx:alpine
    container_name: webserver
    volumes:
    - ./nginx:/etc/nginx
    - ./webui/dist/webui:/data/webui
    ports:
      - "80:80"
      - "443:443"
    networks:
     - docker-network

networks:
  docker-network:
    driver: bridge

volumes:
  elasticsearch-data:
  postgres_data:
  